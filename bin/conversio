#!/usr/bin/env ruby 

$DEBUG = false

require 'rubygems'
require 'erb'
require 'yaml'
require 'fileutils'
require 'pathname'
require 'getoptlong'
require 'ostruct'
require 'conversio'

include Conversio

help = <<EOF
Synopsis
--------

  #{File.split(__FILE__)[-1]}: Renders Markdown plain text files to HTML 

Purpose
-------

Uses Ruby ERB Templates to generate XHTML documents rendered from Markdown
plain text files.

Usage
-----

#{File.split(__FILE__)[-1]} [OPTIONS] SRC [DST]

SRC: File or directory containing the Markdown formated plain text
DST: Target directory for the XHTML output.

Options
-------

--config:

  Creates a personal configuration file in ~/.conversiorc

-c, --colorize:

  Enable syntax high-lighting for taged code blocks. Tags need
  to be in the first line of the code block and have the form
  of two dashes followed by the language like '--ruby' or
  '--c++'.

-e, --engine:

  Select the Markdown parser to be used:
  * 'bluecloth' (default)
  * 'kramdown'

-f, --template-file FILE:

  FILE containing an ERB template with:
  * '<%= content %>' to mark the postion inside the body tag
    to place the passed in content.
  * '<%= style %>' to mark the position for placing CSS.

-h, --help:

  Show this help documentation.

-i, --ignore-config:

  Don't read the configuration from ~/.conversiorc

-l, --list-templates:

  Show a list of all available templates.

-t, --table-of-content [STYLE]:

  Enables the creation of a table of content with STYLE
  * 'div' (default) with <div>-elements
  * 'list' with <ol>/<li>-elements 

-p, --template NAME:

  Select a specific template to be used.

-v, --verbose:

  Print more verbose output.
EOF

config = <<EOF
template: default
colorize: false
table_of_content: div
engine: bluecloth
template_file:
EOF

# -------------------------------------------------------------
# helper functions
# -------------------------------------------------------------

def ask?(*question)
  print question.join(' '), '? (y/n) > '
  return true if STDIN.gets.chomp.downcase.eql?('y')
  return false
end

def overwrite?(*str)
  return ask?('Overwrite',str)
end


# -------------------------------------------------------------
# class extensions
# -------------------------------------------------------------

class Array
  def resolv_path
    Hash[ *self.collect { |e| [e,e.gsub(/.markdown/,'.html') ] }.flatten ]
  end
end

# -------------------------------------------------------------
# main program
# -------------------------------------------------------------
begin

  user_config = "#{ENV['HOME']}/.conversiorc"

  # Initialize options
  options = OpenStruct.new
  options.colorize = nil
  options.engine = nil
  options.table_of_content = nil
  options.template_file = nil
  options.template = nil
  options.ignore_config = nil
  options.verbose = nil

  # list of user options
  opts = GetoptLong.new(
    [ '--colorize', '-c', GetoptLong::NO_ARGUMENT],
    [ '--config', GetoptLong::NO_ARGUMENT],
    [ '--engine', '-e', GetoptLong::REQUIRED_ARGUMENT],
    [ '--ignore-config', '-i', GetoptLong::NO_ARGUMENT],
    [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
    [ '--list-templates', '-l', GetoptLong::NO_ARGUMENT ],
    [ '--table-of-content', '-t', GetoptLong::OPTIONAL_ARGUMENT],
    [ '--template-file', '-f', GetoptLong::REQUIRED_ARGUMENT ],
    [ '--template', '-p', GetoptLong::REQUIRED_ARGUMENT ],
    [ '--verbose', '-v', GetoptLong::NO_ARGUMENT]
  )

  # parse the options from the command line
  opts.each do |opt, arg|
    case opt
    when '--colorize'
      options.colorize = true
    when '--config'
      open(user_config,'w') { |f| f.write config } if overwrite? user_config 
      exit 0
    when '--engine'
      options.engine = arg
    when '--ignore-config'
      options.ignore_config = true
    when '--help' 
      puts help
      exit 0
    when '--list-templates'
      Template.constants.each { |tpl| puts tpl.downcase }
      exit 0
    when '--table-of-content'
      case arg
      when 'list'
        options.table_of_content = 'list'
      when 'div'
        options.table_of_content = 'div'
      else
        options.table_of_content = 'div'
        ARGV = [arg] + ARGV
      end
    when '--template-file'
      options.template_file = arg
    when '--template' 
      options.template = arg
    when '--verbose'
      options.verbose = true
    end
  end

  # get the input source
  src = ARGV[0] || raise("no input defined")
  dst = ARGV[1] # optional parameter!

  # apply user defaults  
  if not options.ignore_config and  File.exists? user_config then
    STDERR.puts "Reading configuration file: #{user_config}" if options.verbose
    defaults = YAML.load_file user_config
    # command-line arguments have precedents before the suer configuration
    options.colorize = defaults['colorize'] if options.colorize.nil?
    options.engine = defaults['engine'] if options.engine.nil?
    options.table_of_content = defaults['table_of_content'] if options.table_of_content.nil?
    options.template_file = defaults['template_file'] if options.template_file.nil?
    options.template = defaults['template'] if options.template.nil?
  end

  # apply system defaults
  options.colorize = false if options.colorize.nil?
  options.engine = 'bluecloth' if options.engine.nil?
  options.table_of_content = false if options.table_of_content.nil?
  options.template_file = nil if options.template_file.nil?
  options.template = 'default' if options.template.nil?
  options.ignore_config = false if options.ignore_config.nil?
  options.verbose = false if options.verbose.nil?

  STDERR.print 'Configuration: ', options, "\n" if options.verbose 
  
  template = String.new
  # user the default ERB template if the user hasn't defined its own
  if options.template_file.nil? then
    STDERR.print 'Using ERB template: ', options.template, "\n" if options.verbose
    template = Template.const_get(options.template.upcase)
  else
    STDERR.print 'Using ERB template: ', options.template_file, "\n" if options.verbose
    options.template_file = File.expand_path(options.template_file)
    if File.exists? options.template_file
      template = File.read options.template_file
    else
      raise("The specified ERB templates is not existing!")
    end
  end

  # setup the converter object
  converter = Converter.new(template)
  converter.load_parser(options.engine) unless options.engine.nil?
  converter.color = true if options.colorize 
  converter.table_of_content = options.table_of_content
  
  # get all the input files
  input_files = Array.new
  if File.directory?(src) then
    input_files = Dir["#{src}/**/*.markdown"]
  else
    file = File.expand_path(src)
    input_files << file
    src = File.dirname(file) 
  end
  src_dst_pairs = input_files.resolv_path
  # fix the destination path if needed
  unless dst.nil? then
    src_dst_pairs.each_pair do |src_path,dst_path|
      src_dst_pairs[src_path] = dst_path.gsub(/#{src}/,dst)      
    end
  end
  # render the XHTML docs
  STDERR.puts 'Created files:' if options.verbose
  src_dst_pairs.each_pair do |s,d| 
    converter.markdown_to_xhtml(s,d)
    STDERR.print '  ', d, "\n" if options.verbose
  end

  exit 0

rescue => exc
  STDERR.puts "ERROR: #{exc.message}"
  STDERR.puts "  use -h for detailed instructions"
  exit 1
end

